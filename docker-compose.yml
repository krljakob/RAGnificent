version: '3.8'

services:
  ragnificent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ragnificent-app
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - RUST_LOG=info
      - RAGNIFICENT_ENVIRONMENT=development
    volumes:
      - ./data:/app/data
      - ./cache:/app/cache
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - qdrant
      - redis
    networks:
      - ragnificent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: ragnificent-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - ragnificent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.2-alpine
    container_name: ragnificent-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ragnificent-redis-pass
    volumes:
      - redis-data:/data
    networks:
      - ragnificent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: ragnificent-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ragnificent-network
    restart: unless-stopped
    depends_on:
      - ragnificent

  grafana:
    image: grafana/grafana:10.2.2
    container_name: ragnificent-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ragnificent-admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ragnificent-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  qdrant-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  ragnificent-network:
    driver: bridge